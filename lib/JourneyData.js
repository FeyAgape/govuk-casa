/**
 * Represents a full dataset. The data stored in here will be the data that
 * eventually gets sent to the dataset service for processing.
 */

const privates = new WeakMap();

/**
 * JourneyData class.
 */
class JourneyData {
  /**
   * Constructor
   *
   * @param  {object} journeyData Entire journey data (indexed by page id)
   * @param  {object} journeyValidationErrors Page errors (indexed by page id)
   */
  constructor(journeyData = {}, journeyValidationErrors = {}) {
    privates.set(this, {
      data: journeyData,
      validationErrors: journeyValidationErrors
    });
    // this._data = journeyData;
    // this._validationErrors = journeyValidationErrors;
  }

  /**
   * Return all journey data.
   *
   * @return {object} Journey data
   */
  getData() {
    const priv = privates.get(this);
    return priv.data;
  }

  /**
   * Overwrite all journey data with a new data object.
   *
   * @param {object} data Data that will overwrite existing data
   * @return {JourneyData} Chain
   */
  setData(data) {
    const priv = privates.get(this);
    priv.data = data;
    privates.set(this, priv);
    return this;
  }

  /**
   * Get data for a specific page in the journey.
   *
   * @param  {string} pageId Page ID
   * @return {object} Page data
   */
  getDataForPage(pageId) {
    const priv = privates.get(this);
    return priv.data[pageId];
  }

  /**
   * Overwrite data for a specific page in the journey.
   *
   * @param {string} pageId Page ID
   * @param {object} data Data to overwrite with
   * @return {JourneyData} Chain
   */
  setDataForPage(pageId, data) {
    const priv = privates.get(this);
    priv.data[pageId] = data;
    privates.set(this, priv);
    return this;
  }

  /**
   * Return validation errors for all pages.
   *
   * @return {object} All page validation errors
   */
  getValidationErrors() {
    const priv = privates.get(this);
    return priv.validationErrors;
  }

  /**
   * Clear any validation errors for the given page.
   *
   * @param {string} pageId Page ID
   * @return {JourneyData} Chain
   */
  clearValidationErrorsForPage(pageId) {
    const priv = privates.get(this);
    delete priv.validationErrors[pageId];
    privates.set(this, priv);
    return this;
  }

  /**
   * Set validation errors for a page.
   *
   * @param {string} pageId Page ID
   * @param {object} errors Array of errors (as generated by Validation.processor)
   * @return {JourneyData} Chain
   */
  setValidationErrorsForPage(pageId, errors = {}) {
    const priv = privates.get(this);

    if (Object.prototype.toString.call(errors) !== '[object Object]') {
      throw new SyntaxError(`Errors must be an Object. Recieved ${Object.prototype.toString.call(errors)}`);
    }

    Object.keys(errors).forEach((k) => {
      if (!Array.isArray(errors[k])) {
        throw new SyntaxError('Field errors must be an array');
      }
    });

    priv.validationErrors[pageId] = errors;

    privates.set(this, priv);
    return this;
  }

  /**
   * Return the validation errors associated with the page's currently held data
   * (if any).
   *
   * @param {string} pageId Page ID
   * @return {object} An object of errors, indexed by field name
   */
  getValidationErrorsForPage(pageId) {
    const priv = privates.get(this);
    return priv.validationErrors[pageId] || {};
  }
}

module.exports = JourneyData;
