image: node:10.12.0-alpine@sha256:1e3e3e7ffc965511c5d4f4e90ec5d9cabee95b5b1fbcd49eb6a2289f425cf183

.executor-docker: &executor-docker
  tags:
    - docker

.not-branches: &not-branches
  only:
    - master
    - develop
    - tags

stages:
  - build
  - compliance
  - unit-tests
  - quality-tests
  - security-tests
  - unit-tests
  - reporting

npm:
  stage: build
  <<: *executor-docker
  script:
    - npm i --no-save --no-optional
    - npm dedupe
  artifacts:
    expire_in: 5 mins
    paths:
      - ./node_modules
      - ./package-lock.json

eslint:
  stage: compliance
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run compliance:lint

coverage:
  stage: unit-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run quality:coverage
  artifacts:
    expire_in: 5 mins
    paths:
      - ./.coverage

sonar-scanner:
  stage: quality-tests
  <<: *executor-docker
  <<: *not-branches
  image: "$CI_REGISTRY/provisioning/docker-sonar-scanner:latest"
  dependencies:
    - coverage
  script:
    - sonar-scanner -Dsonar.projectBaseDir=$CI_PROJECT_DIR

dep-vuln:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run security:vulnerable-packages

checkmarx:
  stage: security-tests
  <<: *executor-docker
  image: $CI_REGISTRY/provisioning/checkmarx-cli:latest
  script:
    - checkmarx ${CI_PROJECT_NAME}@${CI_PROJECT_NAMESPACE}#${CI_COMMIT_REF_NAME} Engineering
  <<: *not-branches

outdated:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm outdated
  allow_failure: true

zap:
  stage: security-tests
  <<: *not-branches
  tags:
    - docker-in-docker
  dependencies:
    - npm
  variables:
    HOSTNAME: pentest.service
    PENTEST_SERVICE_URL: http://$HOSTNAME:4000/
  image: docker:18.06@sha256:f7211e1779c82e3a50d0d6f165e83f3e2be217a234b0181d5e8bee411d8fcc5f
  services:
    - docker:18.06-dind@sha256:fa076bb50825974e0bc8004d48944b0636072dc8d5ccd103b2d9c312acc0a090
  script:
    - docker network create --internal test
    - docker run -d -v $(pwd):/package/:rw --name $HOSTNAME --net test --hostname $HOSTNAME -p 4000:4000 node:10.10.0-alpine /bin/sh -c "cd /package && npm run start-pen-test-service"
    - docker run -t -v $(pwd):/zapout/:rw --name zap --net test -e PENTEST_SERVICE_URL:$PENTEST_SERVICE_URL owasp/zap2docker-stable /bin/sh -c "zap-cli -v start -o '-config api.disablekey=true' && zap-cli -v open-url '$PENTEST_SERVICE_URL' && zap-cli -v spider '$PENTEST_SERVICE_URL' && zap-cli -v quick-scan -s all -f json -r '$PENTEST_SERVICE_URL'; SCAN_EXIT=\$?; echo "\$SCAN_EXIT"; zap-cli -v report -f html -o /zapout/zap-report.html && zap-cli -v shutdown && exit \$SCAN_EXIT"
  artifacts:
    when: always
    expire_in: 5 mins
    paths:
      - ./zap-report.html

pages:
  stage: reporting
  <<: *executor-docker
  <<: *not-branches
  dependencies:
    - zap
  script:
    - mkdir public
    - echo '<dl><dt><a href="zap-report.html">ZAP Report</a></dt><dd>Results of ZAP penetration testing</ss></dl>' > public/index.html
    - mv ./zap-report.html public/
  artifacts:
    paths:
      - public
