image: node:10.16.2-alpine@sha256:0d5abfc8ef9d0984010a05e234324e517620af096b8aeb2fabc841157ef2e676

.executor-docker: &executor-docker
  tags:
    - docker

.not-branches: &not-branches
  only:
    - master
    - develop
    - tags

stages:
  - build
  - compliance
  - security-tests
  - unit-tests
  - quality-tests
  - reporting

npm:
  stage: build
  <<: *executor-docker
  script:
    - npm i --no-save --no-optional
    - npm dedupe
    - npm run prepare
  artifacts:
    expire_in: 20 mins
    paths:
      - ./dist
      - ./node_modules
      - ./package-lock.json

eslint:
  stage: compliance
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run compliance:lint

coverage:
  stage: unit-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run quality:coverage
  artifacts:
    expire_in: 20 mins
    paths:
      - ./.coverage

sonar-scanner:
  stage: quality-tests
  <<: *executor-docker
  <<: *not-branches
  image: "$CI_REGISTRY/engineering-practice/sonar-scanner:latest"
  dependencies:
    - coverage
  script:
    - 'sonar-scanner -Dsonar.projectBaseDir="$CI_PROJECT_DIR"'

sensitives:
  stage: security-tests
  <<: *executor-docker
  script:
    - apk add git
    - eval "git log -p | grep ${LOG_SCAN_QUERY}" && exit 1 || exit 0

dep-vuln:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm run security:vulnerable-packages

checkmarx:
  stage: security-tests
  <<: *executor-docker
  <<: *not-branches
  image: $CI_REGISTRY/engineering-practice/checkmarx-cli:latest
  variables:
    CHECKMARX_REPORT_FORMAT: PDF
  script:
    - checkmarx ${CI_PROJECT_NAME}@${CI_PROJECT_NAMESPACE}#${CI_COMMIT_REF_NAME} Engineering
    - sh -c 'if [ ! -f .checkmarx/checkmarx.PDF ]; then exit 1; fi'
  artifacts:
    paths:
      - .checkmarx
  allow_failure: true

outdated:
  stage: security-tests
  <<: *executor-docker
  dependencies:
    - npm
  script:
    - npm outdated
  allow_failure: true

zap:
  stage: security-tests
  <<: *not-branches
  tags:
    - docker-in-docker
  dependencies:
    - npm
  variables:
    HOSTNAME: pentest.service
    PENTEST_SERVICE_URL: http://$HOSTNAME:4000/
  image: docker:18.09@sha256:265571317aef5ef53bdc88459d9e6e502e47a655b42fda0dfb5b461ddc6a39c2
  services:
    - docker:18.09-dind@sha256:26342d8e4efe27dd0e7a66def70fb3e2dd70e8c6fd8ffe5734c527ea3a41d047
  before_script:
    - export NO_PROXY="$NO_PROXY,docker"
  script:
    - docker network create --internal test
    - docker run -d -v $(pwd):/package/:rw --name $HOSTNAME --net test --hostname $HOSTNAME -p 4000:4000 node:10.10.0-alpine /bin/sh -c "cd /package && npm run start-pen-test-service"
    - docker run -t -v $(pwd):/zapout/:rw --name zap --net test -e PENTEST_SERVICE_URL:$PENTEST_SERVICE_URL owasp/zap2docker-stable /bin/sh -c "zap-cli -v start -o '-config api.disablekey=true' && zap-cli -v open-url '$PENTEST_SERVICE_URL' && zap-cli -v spider '$PENTEST_SERVICE_URL' && zap-cli -v quick-scan -s all -f json -r '$PENTEST_SERVICE_URL'; SCAN_EXIT=\$?; echo "\$SCAN_EXIT"; zap-cli -v report -f html -o /zapout/zap-report.html && zap-cli -v shutdown && exit \$SCAN_EXIT"
  artifacts:
    when: always
    expire_in: 20 mins
    paths:
      - ./zap-report.html

pages:
  stage: reporting
  <<: *executor-docker
  <<: *not-branches
  dependencies:
    - zap
  script:
    - mkdir public
    - echo '<dl><dt><a href="zap-report.html">ZAP Report</a></dt><dd>Results of ZAP penetration testing</ss></dl>' > public/index.html
    - mv ./zap-report.html public/
  artifacts:
    paths:
      - public
