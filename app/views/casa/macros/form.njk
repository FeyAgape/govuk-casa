{#
**** DEPRECATION NOTICE ****

Here lies a legacy. These macros should no longer be used on new projects, and
instead you should use the GOVUK Frontend macros directly. This gives you more
control over the styling and onfiguration of your form elements.
#}

{% from "components/checkboxes/macro.njk" import govukCheckboxes %}
{% from "components/input/macro.njk" import govukInput %}
{% from "components/label/macro.njk" import govukLabel %}
{% from "components/fieldset/macro.njk" import govukFieldset %}

{% from "casa/components/date-input/macro.njk" import casaGovukDateInput %}
{% from "casa/components/input/macro.njk" import casaGovukInput %}
{% from "casa/components/postal-address-object/macro.njk" import casaPostalAddressObject %}
{% from "casa/components/textarea/macro.njk" import casaGovukTextarea %}

{# --------------------------------------------------------------------- text #}
{#
 # Parameters:
 # mixed data = Field data
 # string name = Field name
 # string label = Field label (ignored if `labelledBy` option used)
 # object options = Field options (see below)
 # object errors = Form errors
 #
 # Options:
 # object inputAttributes = Additional attributes for input element ({attr: value})
 # bool unbolden = Unbolden the label
 # bool hiddenLabel = Visually hide the label
 # string hint = Hint (will be escaped)
 # string hintHtml = Hint (will not be escaped)
 # string size = CSS class to set size (see GDS sizes)
 # int maxlength = Maximum length acceptable [DEPRECATED; use options.inputAttributes to specify this]
 # string labelledBy = ID(s) of the element(s) that provide a label for this text input
 # string inputPrefixHtml = Prefix the input with markup
 # string inputPostfixHtml = Suffix the input with markup
 # bool lineBreak = Add an <hr /> after input [DEPRECATED; do not use]
 #}
{% macro text(data, name, label, options, errors) %}
  {% set fieldErrors = errors[name] %}

  {# Build up element attributes #}
  {% set attributes = options.inputAttributes or {} %}
  {% if options.maxlength %}
    {% set attributes = mergeObjects(attributes, {maxlength: options.maxlength}) %}
  {% endif %}
  {% if options.labelledBy %}
    {% set attributes = mergeObjects(attributes, {'aria-labelledby': options.labelledBy}) %}
  {% endif %}

  {% if options.inputPrefixHtml %}
    {{ options.inputPrefixHtml | safe }}
  {% endif %}

  {{ casaGovukInput({
    id: attributes.id if attributes.id else 'f-' + name,
    name: name,
    type: "text",
    value: data,
    label: {
      html: '<span class="govuk-visually-hidden">' + label + '</span>' if options.hiddenLabel else null,
      text: label if not options.hiddenLabel else null,
      classes: "govuk-label" if options.unbolden else "govuk-label--m"
    },
    hint: {
      text: options.hint,
      html: options.hintHtml
    } if options.hintHtml or options.hint,
    classes: options.size or "govuk-!-width-one-half",
    attributes: attributes,
    casaErrors: errors
  }) }}

  {% if options.inputPostfixHtml %}
    {{ options.inputPostfixHtml | safe }}
  {% endif %}

  {% if options.lineBreak %}
    <hr />
  {% endif %}
{% endmacro %}


{# --------------------------------------------------------------- checkboxes #}
{#
 # Single checkbox, wrapped within a <label> element.
 # Generally, you would wrap several of these checkboxes within a call to the
 # `checkboxArrayGroup` macro, which will also apply the error assets to the markup.
 #
 # Parameters:
 # mixed data = Field data
 # string name = Field name
 # string label = Field label
 # mixed value = checkbox 'value'
 # object options = Field options (see below)
 #
 # Options:
 # string targetPanel = ID of the DOM element that will be opened when this checkbox is chosen
 # bool checked = Whether checkbox input should be rendered pre-checked or not
 #}
{% macro checkboxArray(data, name, label, value, options) %}
  {% set _checked = false %}
  {% for val in data %}
    {% if val == value %}
      {% set _checked = true %}
    {% endif %}
  {% endfor %}

  {# Build attributes #}
  {% set attributes = options.inputAttributes or {} %}
  {% set attributes = mergeObjects(attributes, {
    id: "f-checkbox-" + name + "-" + value,
    name: name + "[]",
    value: value
  }) %}
  {% if options.targetPanel %}
    {% set attributes = mergeObjects(attributes, {'data-target': options.targetPanel}) %}
  {% endif %}
  {% if options.checked or _checked %}
    {% set attributes = mergeObjects(attributes, {'checked': 'checked'}) %}
  {% endif %}

  <div class="govuk-form-group">
    <div class="govuk-checkboxes__item">
      <input class="govuk-checkboxes__input" type="checkbox" {{ attributes | renderAsAttributes }}/>
      {{ govukLabel({
        text: label,
        for: "f-checkbox-" + name + "-" + value,
        classes: 'govuk-checkboxes__label'
      }) }}
    </div>
  </div>
{% endmacro %}

{#
 # Wrap a series of related checkbox inputs. This ensures related errors are only shown once for the gorup,
 # rather than for each checkbox input.
 #
 # Parameters:
 # mixed data = Field data
 # string name = Field name
 # string label = Field label (ignored if options.labelledby is set)
 # object options = Macro options (see below)
 # array errors = Errors associated with this field
 #
 # Options:
 # object groupAttributes = Additional attributes to add to .form-group (attr:value)
 # bool unbolden = Unbolden the label
 # string labelledBy = ID(s) of the element(s) that provide a label for this group.
 # bool hiddenLabel = Hide the label. Useful if you have labelled it elsewhere, outside of this macro.
 # string hint = Hint (will be escaped)
 # string hintHtml = Hint (will not be escaped)
 # string prefixHtml = Prefix the radio group with markup
 #}
{% macro checkboxArrayGroup(data, name, label, options, errors) %}
  {% set groupFieldErrors = errors[name] %}

  <div class="govuk-form-group {{ "govuk-form-group--error" if groupFieldErrors }}" {{ options.groupAttributes | renderAsAttributes }}>
    <fieldset class="govuk-fieldset" aria-describedby="{{ name }}-hint {{ name + '-error' if groupFieldErrors }}">
      {% if (not options.labelledBy) %}
        <legend>
          {% if (not options.labelledBy) %}
            <span class="govuk-label {{ 'govuk-label--m' if not options.unbolden }} {{ 'govuk-visually-hidden' if options.hiddenLabel }}">{{ label }}</span>
          {% endif %}
        </legend>
      {% endif %}

      {% if options.hint %}
        <span id="f-{{ name }}-hint" class="govuk-hint">{{ options.hint }}</span>
      {% endif %}
      {% if options.hintHtml %}
        <span id="f-{{ name }}-hint" class="govuk-hint">{{ options.hintHtml | safe }}</span>
      {% endif %}

      {% if groupFieldErrors %}
        {% set dv = {fn:name, va:groupFieldErrors[0].validator} %}
        <span id="f-{{ name }}-error" class="govuk-error-message" data-validation="{{ dv | dump }}">{{ t(groupFieldErrors[0].inline) }}</span>
      {% endif %}

      <div class="govuk-checkboxes">
        {{ caller() }}
      </div>
    </fieldset>
  </div>
{% endmacro %}


{# ------------------------------------------------------------------- radios #}
{#
 # Single radio button, wrapped within a <label> element.
 # Generally, you would wrap several of these radio buttons within a call to the
 # `radioGroup` macro, which will also apply the error assets to the markup.
 #
 # Parameters:
 # mixed data = Field data
 # string name = Field name
 # string label = Field label
 # mixed value = Radio button 'value'
 # object options = Field options (see below)
 #
 # Options:
 # object inputAttributes = Additional attributes to add to <input> (attr:value)
 # string idSuffix = Suffix to add to the 'id' attribute on <input>
 # bool targetClearOnOpen = !DEPRECATED! Instruct toggle JS to clear target panel's inputs when opened
 # string targetPanel = ID of the DOM element that will be opened when this radio button is chosen
 # bool checked = Whether radio input should be rendered pre-checked or not
 #}
{% macro radio(data, name, label, value, options) %}
  {% if options.inputAttributes.id %}
    {% set fieldId = options.inputAttributes.id %}
  {% else %}
    {% set fieldId = 'f-radio-' + name + '-' + value %}
  {% endif %}

  {% if options.idSuffix %}
    {% set fieldId = fieldId + options.idSuffix %}
  {% endif %}

  {#
  This is copied directly from the govuk-frontend "radios" component because
  there's no way to untangle the radio inputs from the surrounding markup that
  the govuk-frontend macro provides. A couple of minor customisations are also
  applied.
  #}
  <div class="govuk-radios__item">
    <input class="govuk-radios__input" name="{{ name }}" type="radio" value="{{ value }}"
    {% if not options.inputAttributes.id %} id="{{ fieldId }}"{%endif %}
    {{ 'checked' if options.checked or data == value }}
    {{ options.inputAttributes | renderAsAttributes }}
    {%- if options.targetPanel %} data-target="{{ options.targetPanel }}"{% endif -%}
    {{ 'data-target-clear-on-open="yes"' if options.targetClearOnOpen }}>
    {{ govukLabel({
      text: label,
      classes: 'govuk-radios__label',
      for: fieldId
    }) | indent(6) | trim }}
  </div>
{% endmacro %}

{#
 # Wrap a series of related radio inputs (i.e. those with the same "name"
 # attribute). This ensures related errors are only shown once for the gorup,
 # rather than for each radio input.
 #
 # Parameters:
 # mixed value = Value of the field
 # string name = Field name
 # string label = Field label (ignored if options.labelledby is set)
 # object options = Macro options (see below)
 # array errors = Errors associated with this field
 #
 # Options:
 # object groupAttributes = Additional attributes to add to .form-group (attr:value)
 # string labelledBy = ID(s) of the element(s) that provide a label for this group.
 # bool hiddenLabel = Hide the label. Useful if you have labelled it elsewhere, outside of this macro.
 # string hint = Hint (will be escaped)
 # string hintHtml = Hint (will not be escaped)
 # string prefixHtml = Prefix the radio group with markup
 #}
{% macro radioGroup(data, name, label, options, errors) %}
  {% set groupFieldErrors = errors[name] %}

  {% if groupFieldErrors %}
    {% set dv = {fn: name, va: groupFieldErrors[0].validator} %}
  {% endif %}

  <div class="govuk-form-group {{ "govuk-form-group--error" if groupFieldErrors }}" {{ options.groupAttributes | renderAsAttributes }}>
    <fieldset class="govuk-fieldset"
      aria-describedby="{{ name }}-hint {{ name + '-error' if groupFieldErrors }}"
      {{ 'aria-labelledby="' + options.labelledBy + '"' if options.labelledBy else '' }}>
      {% if (not options.labelledBy) %}
        <legend>
          {% if (not options.labelledBy) %}
            <span class="govuk-label {{ 'govuk-label--m' if not options.unbolden }} {{ 'govuk-visually-hidden' if options.hiddenLabel }}">{{ label }}</span>
          {% endif %}
        </legend>
      {% endif %}

      {% if options.hint %}
        <span id="f-{{ name }}-hint" class="govuk-hint">{{ options.hint }}</span>
      {% endif %}
      {% if options.hintHtml %}
        <span id="f-{{ name }}-hint" class="govuk-hint">{{ options.hintHtml | safe }}</span>
      {% endif %}

      {% if groupFieldErrors %}
        {% set dv = {fn:name, va:groupFieldErrors[0].validator} %}
        <span id="f-{{ name }}-error" class="govuk-error-message" data-validation="{{ dv | dump }}">{{ t(groupFieldErrors[0].inline) }}</span>
      {% endif %}

      {% if options.prefixHtml %}
        {{ options.prefixHtml | safe }}
      {% endif %}

      <div class="govuk-radios{{ ' govuk-radios--inline' if options.inline }}">
        {{ caller() }}
      </div>
    </fieldset>
  </div>
{% endmacro %}


{# ----------------------------------------------------------------- textarea #}
{#
 # Parameters:
 # mixed data = Field data
 # string name = Field name
 # string label = Field label (ignored if `labelledBy` option used)
 # object options = Field options (see below)
 # object errors = Form errors
 #
 # Options:
 # object inputAttributes = Additional attributes to add to <textarea> (attr:value)
 # bool unbolden = Unbolden the label
 # bool hiddenLabel = Visually hide the label
 # string hint = Hint (will be escaped)
 # string hintHtml = Hint (will not be escaped)
 # string size = CSS class to set size (see GDS sizes)
 # int maxlength = Maximum length acceptable
 # string labelledBy = ID(s) of the element(s) that provide a label for this group.
 #}
{% macro textarea(data, name, label, options, errors) %}
  {# Build up attributes #}
  {% set attributes = options.inputAttributes or {} %}
  {% if options.maxlength %}
    {% set attributes = mergeObjects(attributes, {maxlength: options.maxlength}) %}
  {% endif %}
  {% if options.labelledBy %}
    {% set attributes = mergeObjects(attributes, {'aria-labelledby': options.labelledBy}) %}
  {% endif %}

  {% if options.inputPrefixHtml %}
    {{ options.inputPrefixHtml | safe }}
  {% endif %}

  {{ casaGovukTextarea({
    id: options.inputAttributes.id if options.inputAttributes.id else 'f-' + name,
    name: name,
    value: data,
    label: {
      html: '<span class="govuk-visually-hidden">' + label + '</span>' if options.hiddenLabel else null,
      text: label if not options.hiddenLabel else null,
      classes: "govuk-label" if options.unbolden else "govuk-label--m"
    },
    classes: options.size if options.size else null,
    casaErrors: errors,
    attributes: attributes,
    hint: {
      text: options.hint,
      html: options.hintHtml
    } if options.hint or options.hintHtml
  }) }}
{% endmacro %}


{# --------------------------------------------------------------------- date #}
{#
 # Options:
 # object groupAttributes = Additional attributes to add to .govuk-date-input (attr:value)
 # string hint = Text hint (default "DD MM YYYY")
 # string hintHtml = HTML hint (default "DD MM YYYY")
 #
 # DEPRECATED:
 # bool allowMonthNames = If true, input will allow "Jan", "January", etc.
 #}
{% macro dateObject(data, name, label, options, errors) %}
  {{ casaGovukDateInput({
    name: name,
    casaValue: data,
    fieldset: {
      legend: {
        text: label,
        isPageHeading: false,
        classes: 'govuk-fieldset__legend--m'
      }
    },
    hint: {
      text: options.hint,
      html: options.hintHtml
    } if options.hint or options.hintHtml,
    attributes: options.groupAttributes or {},
    casaErrors: errors
  })}}
{% endmacro %}


{# ------------------------------------------------------ postalAddressObject #}
{#
 # Works hand in hand with the core CASA `postalAddressObject` validation rule.
 #
 # Options:
 # string prefixHtml = HTML to display after the label and before the inputs
 # object groupAttributes = Additional attributes to add to <fieldset> (attr:value)
 # object addressInputAttributes = Attributes to place on all address[1-4] input fields
 # array excludeFields = Fields to hide (e.g. ['address4']). Applies to address2/address4 only
 # int maxlength = Max length for all address[1-4] inputs
 #}
{% macro postalAddressObject(data, name, label, options, errors) %}

  {{ casaPostalAddressObject({
    name: name,
    value: data,
    fieldset: {
      legend: {
        text: label,
        classes: "govuk-fieldset__legend--m",
        isPageHeading: false
      }
    },
    casaErrors: errors
  }) }}

{% endmacro %}
